# Script para testar edi√ß√£o e exclus√£o de transa√ß√µes
# Execute: .\teste-edicao-exclusao.ps1

Write-Host "=== TESTE DE EDI√á√ÉO E EXCLUS√ÉO DE TRANSA√á√ïES ===" -ForegroundColor Green
Write-Host ""

# Configura√ß√µes
$baseUrl = "http://localhost:3001"
$token = ""
$transactionId = ""

# Fun√ß√£o para fazer login e obter token
function Get-AuthToken {
    Write-Host "üîê Fazendo login..." -ForegroundColor Yellow
    
    $loginBody = @{
        email = "teste@gmail.com"
        password = "testes"
    } | ConvertTo-Json

    try {
        $response = Invoke-RestMethod -Uri "$baseUrl/login" -Method POST -Body $loginBody -ContentType "application/json"
        $script:token = $response.token
        Write-Host "‚úÖ Login realizado com sucesso!" -ForegroundColor Green
        Write-Host "Token: $($token.Substring(0, 50))..." -ForegroundColor Gray
        Write-Host ""
    }
    catch {
        Write-Host "‚ùå Erro no login: $($_.Exception.Message)" -ForegroundColor Red
        exit 1
    }
}

# Fun√ß√£o para fazer requisi√ß√µes autenticadas
function Invoke-AuthenticatedRequest {
    param(
        [string]$Uri,
        [string]$Method = "GET",
        [object]$Body = $null
    )
    
    $headers = @{
        "Authorization" = "Bearer $token"
        "Content-Type" = "application/json"
    }
    
    try {
        if ($Body) {
            $response = Invoke-RestMethod -Uri $Uri -Method $Method -Headers $headers -Body ($Body | ConvertTo-Json)
        } else {
            $response = Invoke-RestMethod -Uri $Uri -Method $Method -Headers $headers
        }
        return $response
    }
    catch {
        Write-Host "‚ùå Erro na requisi√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Fun√ß√£o para criar uma transa√ß√£o de teste
function Create-TestTransaction {
    Write-Host "üìù Criando transa√ß√£o de teste..." -ForegroundColor Yellow
    
    $transactionBody = @{
        accountId = "67607133f840bb97892eb659"
        description = "Transa√ß√£o de teste para edi√ß√£o"
        amount = 250.75
        type = "expense"
        category = "Teste"
        account = "Conta de Teste"
        notes = "Transa√ß√£o criada para testar edi√ß√£o e exclus√£o"
        tags = @("teste", "edi√ß√£o", "exclus√£o")
        anexo = "teste.pdf"
    }
    
    $response = Invoke-AuthenticatedRequest -Uri "$baseUrl/account/transaction" -Method POST -Body $transactionBody
    
    if ($response) {
        $script:transactionId = $response.result.id
        Write-Host "‚úÖ Transa√ß√£o de teste criada: $transactionId" -ForegroundColor Green
        Write-Host "   Descri√ß√£o: $($response.result.description)" -ForegroundColor White
        Write-Host "   Valor: R$ $($response.result.amount)" -ForegroundColor White
        Write-Host "   Tipo: $($response.result.type)" -ForegroundColor White
        Write-Host ""
        return $true
    } else {
        Write-Host "‚ùå Erro ao criar transa√ß√£o de teste" -ForegroundColor Red
        return $false
    }
}

# Fun√ß√£o para testar edi√ß√£o de transa√ß√£o
function Test-UpdateTransaction {
    Write-Host "‚úèÔ∏è  Testando edi√ß√£o de transa√ß√£o..." -ForegroundColor Cyan
    
    $updateBody = @{
        description = "Transa√ß√£o de teste ATUALIZADA"
        amount = 300.50
        category = "Teste Atualizado"
        notes = "Transa√ß√£o atualizada com sucesso"
        tags = @("teste", "atualizado", "sucesso")
        anexo = "atualizado.pdf"
    }
    
    $response = Invoke-AuthenticatedRequest -Uri "$baseUrl/account/transaction/$transactionId" -Method PUT -Body $updateBody
    
    if ($response) {
        Write-Host "‚úÖ Transa√ß√£o atualizada com sucesso!" -ForegroundColor Green
        Write-Host "   Nova descri√ß√£o: $($response.result.description)" -ForegroundColor White
        Write-Host "   Novo valor: R$ $($response.result.amount)" -ForegroundColor White
        Write-Host "   Nova categoria: $($response.result.category)" -ForegroundColor White
        Write-Host "   Novas observa√ß√µes: $($response.result.notes)" -ForegroundColor White
        Write-Host "   Novas tags: $($response.result.tags -join ', ')" -ForegroundColor White
        Write-Host "   Novo anexo: $($response.result.anexo)" -ForegroundColor White
    }
    Write-Host ""
}

# Fun√ß√£o para testar edi√ß√£o parcial
function Test-PartialUpdate {
    Write-Host "‚úèÔ∏è  Testando edi√ß√£o parcial (apenas descri√ß√£o)..." -ForegroundColor Cyan
    
    $partialUpdateBody = @{
        description = "Transa√ß√£o com edi√ß√£o parcial"
    }
    
    $response = Invoke-AuthenticatedRequest -Uri "$baseUrl/account/transaction/$transactionId" -Method PUT -Body $partialUpdateBody
    
    if ($response) {
        Write-Host "‚úÖ Edi√ß√£o parcial realizada com sucesso!" -ForegroundColor Green
        Write-Host "   Descri√ß√£o atualizada: $($response.result.description)" -ForegroundColor White
        Write-Host "   Valor mantido: R$ $($response.result.amount)" -ForegroundColor White
        Write-Host "   Categoria mantida: $($response.result.category)" -ForegroundColor White
    }
    Write-Host ""
}

# Fun√ß√£o para testar edi√ß√£o com dados inv√°lidos
function Test-InvalidUpdate {
    Write-Host "‚úèÔ∏è  Testando edi√ß√£o com dados inv√°lidos..." -ForegroundColor Cyan
    
    $invalidUpdateBody = @{
        amount = "valor-invalido"
        type = "tipo-invalido"
    }
    
    $response = Invoke-AuthenticatedRequest -Uri "$baseUrl/account/transaction/$transactionId" -Method PUT -Body $invalidUpdateBody
    
    if ($response -eq $null) {
        Write-Host "‚úÖ Comportamento correto: Erro para dados inv√°lidos" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Resposta inesperada para dados inv√°lidos" -ForegroundColor Yellow
    }
    Write-Host ""
}

# Fun√ß√£o para testar edi√ß√£o de transa√ß√£o inexistente
function Test-UpdateNonExistentTransaction {
    Write-Host "‚úèÔ∏è  Testando edi√ß√£o de transa√ß√£o inexistente..." -ForegroundColor Cyan
    
    $invalidId = "123456789012345678901234"
    $updateBody = @{
        description = "Transa√ß√£o inexistente"
    }
    
    $response = Invoke-AuthenticatedRequest -Uri "$baseUrl/account/transaction/$invalidId" -Method PUT -Body $updateBody
    
    if ($response -eq $null) {
        Write-Host "‚úÖ Comportamento correto: Transa√ß√£o n√£o encontrada" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Resposta inesperada para transa√ß√£o inexistente" -ForegroundColor Yellow
    }
    Write-Host ""
}

# Fun√ß√£o para testar exclus√£o de transa√ß√£o
function Test-DeleteTransaction {
    Write-Host "üóëÔ∏è  Testando exclus√£o de transa√ß√£o..." -ForegroundColor Cyan
    
    $response = Invoke-AuthenticatedRequest -Uri "$baseUrl/account/transaction/$transactionId" -Method DELETE
    
    if ($response) {
        Write-Host "‚úÖ Transa√ß√£o exclu√≠da com sucesso!" -ForegroundColor Green
        Write-Host "   ID da transa√ß√£o exclu√≠da: $($response.result.deletedTransaction.id)" -ForegroundColor White
        Write-Host "   Descri√ß√£o: $($response.result.deletedTransaction.description)" -ForegroundColor White
        Write-Host "   Valor: R$ $($response.result.deletedTransaction.amount)" -ForegroundColor White
    }
    Write-Host ""
}

# Fun√ß√£o para testar exclus√£o de transa√ß√£o inexistente
function Test-DeleteNonExistentTransaction {
    Write-Host "üóëÔ∏è  Testando exclus√£o de transa√ß√£o inexistente..." -ForegroundColor Cyan
    
    $invalidId = "123456789012345678901234"
    $response = Invoke-AuthenticatedRequest -Uri "$baseUrl/account/transaction/$invalidId" -Method DELETE
    
    if ($response -eq $null) {
        Write-Host "‚úÖ Comportamento correto: Transa√ß√£o n√£o encontrada" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Resposta inesperada para transa√ß√£o inexistente" -ForegroundColor Yellow
    }
    Write-Host ""
}

# Fun√ß√£o para verificar se a transa√ß√£o foi realmente exclu√≠da
function Test-VerifyDeletion {
    Write-Host "üîç Verificando se a transa√ß√£o foi realmente exclu√≠da..." -ForegroundColor Cyan
    
    $response = Invoke-AuthenticatedRequest -Uri "$baseUrl/account/transaction/$transactionId"
    
    if ($response -eq $null) {
        Write-Host "‚úÖ Confirma√ß√£o: Transa√ß√£o n√£o encontrada (exclu√≠da com sucesso)" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Alerta: Transa√ß√£o ainda existe ap√≥s exclus√£o" -ForegroundColor Yellow
    }
    Write-Host ""
}

# Execu√ß√£o dos testes
try {
    # Obter token de autentica√ß√£o
    Get-AuthToken
    
    # Criar transa√ß√£o de teste
    if (Create-TestTransaction) {
        # Testes de edi√ß√£o
        Test-UpdateTransaction
        Test-PartialUpdate
        Test-InvalidUpdate
        Test-UpdateNonExistentTransaction
        
        # Testes de exclus√£o
        Test-DeleteTransaction
        Test-DeleteNonExistentTransaction
        Test-VerifyDeletion
        
        Write-Host "üéâ Todos os testes de edi√ß√£o e exclus√£o foram executados com sucesso!" -ForegroundColor Green
        Write-Host ""
        Write-Host "üìã Resumo dos testes:" -ForegroundColor Cyan
        Write-Host "   ‚úÖ Cria√ß√£o de transa√ß√£o de teste" -ForegroundColor White
        Write-Host "   ‚úÖ Edi√ß√£o completa de transa√ß√£o" -ForegroundColor White
        Write-Host "   ‚úÖ Edi√ß√£o parcial de transa√ß√£o" -ForegroundColor White
        Write-Host "   ‚úÖ Valida√ß√£o de dados inv√°lidos" -ForegroundColor White
        Write-Host "   ‚úÖ Edi√ß√£o de transa√ß√£o inexistente" -ForegroundColor White
        Write-Host "   ‚úÖ Exclus√£o de transa√ß√£o" -ForegroundColor White
        Write-Host "   ‚úÖ Exclus√£o de transa√ß√£o inexistente" -ForegroundColor White
        Write-Host "   ‚úÖ Verifica√ß√£o de exclus√£o" -ForegroundColor White
        Write-Host ""
        Write-Host "üîó Endpoints testados:" -ForegroundColor Yellow
        Write-Host "   ‚Ä¢ PUT /account/transaction/{transactionId}" -ForegroundColor White
        Write-Host "   ‚Ä¢ DELETE /account/transaction/{transactionId}" -ForegroundColor White
        Write-Host "üåê Acesse a documenta√ß√£o: http://localhost:3001/docs" -ForegroundColor Yellow
    } else {
        Write-Host "‚ùå N√£o foi poss√≠vel criar transa√ß√£o de teste" -ForegroundColor Red
    }
}
catch {
    Write-Host "‚ùå Erro durante a execu√ß√£o dos testes: $($_.Exception.Message)" -ForegroundColor Red
} 