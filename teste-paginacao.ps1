# Script de teste para pagina√ß√£o do extrato
# Autor: Sistema Banc√°rio Tech Challenge 2

Write-Host "=== TESTE DE PAGINA√á√ÉO DO EXTRATO ===" -ForegroundColor Green
Write-Host ""

# URL base da API
$baseUrl = "http://localhost:3001"

# 1. Criar um usu√°rio para teste
Write-Host "1. Criando usu√°rio para teste..." -ForegroundColor Yellow
$userData = @{
    username = "Teste Pagina√ß√£o"
    email = "paginacao@teste.com"
    password = "123456"
} | ConvertTo-Json

try {
    $userResponse = Invoke-WebRequest -Uri "$baseUrl/user" -Method POST -Body $userData -ContentType "application/json"
    $userResult = $userResponse.Content | ConvertFrom-Json
    Write-Host "‚úÖ Usu√°rio criado com sucesso!" -ForegroundColor Green
    Write-Host "   ID: $($userResult.result.id)" -ForegroundColor Cyan
    Write-Host ""
} catch {
    Write-Host "‚ùå Erro ao criar usu√°rio: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# 2. Autenticar o usu√°rio
Write-Host "2. Autenticando usu√°rio..." -ForegroundColor Yellow
$authData = @{
    email = "paginacao@teste.com"
    password = "123456"
} | ConvertTo-Json

try {
    $authResponse = Invoke-WebRequest -Uri "$baseUrl/user/auth" -Method POST -Body $authData -ContentType "application/json"
    $authResult = $authResponse.Content | ConvertFrom-Json
    $token = $authResult.result.token
    $headers = @{ "Authorization" = "Bearer $token" }
    Write-Host "‚úÖ Usu√°rio autenticado com sucesso!" -ForegroundColor Green
    Write-Host ""
} catch {
    Write-Host "‚ùå Erro ao autenticar usu√°rio: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# 3. Buscar conta do usu√°rio
Write-Host "3. Buscando conta do usu√°rio..." -ForegroundColor Yellow
try {
    $accountResponse = Invoke-WebRequest -Uri "$baseUrl/account" -Method GET -Headers $headers
    $accountResult = $accountResponse.Content | ConvertFrom-Json
    $accountId = $accountResult.result.account[0].id
    Write-Host "‚úÖ Conta encontrada!" -ForegroundColor Green
    Write-Host "   ID da Conta: $accountId" -ForegroundColor Cyan
    Write-Host ""
} catch {
    Write-Host "‚ùå Erro ao buscar conta: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# 4. Criar v√°rias transa√ß√µes para testar pagina√ß√£o
Write-Host "4. Criando transa√ß√µes para teste de pagina√ß√£o..." -ForegroundColor Yellow

$categories = @("Sal√°rio", "Alimenta√ß√£o", "Transporte", "Lazer", "Contas")
$descriptions = @(
    "Sal√°rio mensal",
    "Compras no supermercado", 
    "Combust√≠vel",
    "Cinema",
    "Conta de luz",
    "Freelance",
    "Restaurante",
    "Uber",
    "Netflix",
    "Internet"
)

for ($i = 0; $i -lt 15; $i++) {
    $category = $categories[$i % $categories.Length]
    $description = $descriptions[$i % $descriptions.Length]
    $amount = if ($i % 2 -eq 0) { (Get-Random -Minimum 100 -Maximum 5000) } else { -(Get-Random -Minimum 50 -Maximum 500) }
    $type = if ($amount -gt 0) { "income" } else { "expense" }
    
    $transactionData = @{
        accountId = $accountId
        description = "$description $($i + 1)"
        amount = [Math]::Abs($amount)
        type = $type
        category = $category
        notes = "Transa√ß√£o de teste $($i + 1)"
        tags = @($category.ToLower(), "teste")
    } | ConvertTo-Json

    try {
        $transactionResponse = Invoke-WebRequest -Uri "$baseUrl/account/transaction" -Method POST -Body $transactionData -Headers $headers -ContentType "application/json"
        Write-Host "   ‚úÖ Transa√ß√£o $($i + 1) criada" -ForegroundColor Green
    } catch {
        Write-Host "   ‚ùå Erro ao criar transa√ß√£o $($i + 1): $($_.Exception.Message)" -ForegroundColor Red
    }
}
Write-Host ""

# 5. Testar pagina√ß√£o - Primeira p√°gina
Write-Host "5. Testando primeira p√°gina (padr√£o)..." -ForegroundColor Yellow
try {
    $page1Response = Invoke-WebRequest -Uri "$baseUrl/account/$accountId/statement" -Method GET -Headers $headers
    $page1Result = $page1Response.Content | ConvertFrom-Json
    Write-Host "‚úÖ Primeira p√°gina carregada!" -ForegroundColor Green
    Write-Host "   Total de itens: $($page1Result.result.pagination.totalItems)" -ForegroundColor Cyan
    Write-Host "   P√°gina atual: $($page1Result.result.pagination.currentPage)" -ForegroundColor Cyan
    Write-Host "   Total de p√°ginas: $($page1Result.result.pagination.totalPages)" -ForegroundColor Cyan
    Write-Host "   Itens por p√°gina: $($page1Result.result.pagination.itemsPerPage)" -ForegroundColor Cyan
    Write-Host "   Tem pr√≥xima p√°gina: $($page1Result.result.pagination.hasNextPage)" -ForegroundColor Cyan
    Write-Host ""
} catch {
    Write-Host "‚ùå Erro ao carregar primeira p√°gina: $($_.Exception.Message)" -ForegroundColor Red
}

# 6. Testar pagina√ß√£o - Segunda p√°gina
Write-Host "6. Testando segunda p√°gina..." -ForegroundColor Yellow
try {
    $page2Response = Invoke-WebRequest -Uri "$baseUrl/account/$accountId/statement?page=2&limit=5" -Method GET -Headers $headers
    $page2Result = $page2Response.Content | ConvertFrom-Json
    Write-Host "‚úÖ Segunda p√°gina carregada!" -ForegroundColor Green
    Write-Host "   P√°gina atual: $($page2Result.result.pagination.currentPage)" -ForegroundColor Cyan
    Write-Host "   Itens por p√°gina: $($page2Result.result.pagination.itemsPerPage)" -ForegroundColor Cyan
    Write-Host "   Tem p√°gina anterior: $($page2Result.result.pagination.hasPrevPage)" -ForegroundColor Cyan
    Write-Host "   Tem pr√≥xima p√°gina: $($page2Result.result.pagination.hasNextPage)" -ForegroundColor Cyan
    Write-Host ""
} catch {
    Write-Host "‚ùå Erro ao carregar segunda p√°gina: $($_.Exception.Message)" -ForegroundColor Red
}

# 7. Testar ordena√ß√£o por valor
Write-Host "7. Testando ordena√ß√£o por valor (maior para menor)..." -ForegroundColor Yellow
try {
    $sortResponse = Invoke-WebRequest -Uri "$baseUrl/account/$accountId/statement?sort=amount&order=desc&limit=3" -Method GET -Headers $headers
    $sortResult = $sortResponse.Content | ConvertFrom-Json
    Write-Host "‚úÖ Ordena√ß√£o por valor aplicada!" -ForegroundColor Green
    Write-Host "   Campo de ordena√ß√£o: $($sortResult.result.filters.sort)" -ForegroundColor Cyan
    Write-Host "   Ordem: $($sortResult.result.filters.order)" -ForegroundColor Cyan
    Write-Host "   Primeiro valor: $($sortResult.result.transactions[0].amount)" -ForegroundColor Cyan
    Write-Host ""
} catch {
    Write-Host "‚ùå Erro ao testar ordena√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
}

# 8. Testar busca por categoria com pagina√ß√£o
Write-Host "8. Testando busca por categoria com pagina√ß√£o..." -ForegroundColor Yellow
try {
    $categoryResponse = Invoke-WebRequest -Uri "$baseUrl/account/transactions/category/Alimenta√ß√£o?page=1&limit=3" -Method GET -Headers $headers
    $categoryResult = $categoryResponse.Content | ConvertFrom-Json
    Write-Host "‚úÖ Busca por categoria com pagina√ß√£o!" -ForegroundColor Green
    Write-Host "   Categoria: $($categoryResult.result.category)" -ForegroundColor Cyan
    Write-Host "   Total de itens: $($categoryResult.result.pagination.totalItems)" -ForegroundColor Cyan
    Write-Host "   P√°gina atual: $($categoryResult.result.pagination.currentPage)" -ForegroundColor Cyan
    Write-Host ""
} catch {
    Write-Host "‚ùå Erro ao buscar por categoria: $($_.Exception.Message)" -ForegroundColor Red
}

# 9. Testar valida√ß√£o de par√¢metros inv√°lidos
Write-Host "9. Testando valida√ß√£o de par√¢metros inv√°lidos..." -ForegroundColor Yellow
try {
    $invalidResponse = Invoke-WebRequest -Uri "$baseUrl/account/$accountId/statement?page=0&limit=200" -Method GET -Headers $headers
    Write-Host "‚ùå Valida√ß√£o falhou - deveria ter retornado erro" -ForegroundColor Red
} catch {
    $errorResult = $_.Exception.Response.GetResponseStream()
    $reader = New-Object System.IO.StreamReader($errorResult)
    $errorContent = $reader.ReadToEnd()
    Write-Host "‚úÖ Valida√ß√£o funcionando corretamente!" -ForegroundColor Green
    Write-Host "   Erro retornado: $errorContent" -ForegroundColor Cyan
    Write-Host ""
}

Write-Host "=== TESTE DE PAGINA√á√ÉO CONCLU√çDO COM SUCESSO! ===" -ForegroundColor Green
Write-Host ""
Write-Host "üéâ Todas as funcionalidades de pagina√ß√£o est√£o funcionando!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Resumo das funcionalidades testadas:" -ForegroundColor Yellow
Write-Host "   ‚úÖ Pagina√ß√£o b√°sica (page, limit)" -ForegroundColor Green
Write-Host "   ‚úÖ Ordena√ß√£o (sort, order)" -ForegroundColor Green
Write-Host "   ‚úÖ Informa√ß√µes de pagina√ß√£o (totalPages, hasNextPage, etc.)" -ForegroundColor Green
Write-Host "   ‚úÖ Busca por categoria com pagina√ß√£o" -ForegroundColor Green
Write-Host "   ‚úÖ Valida√ß√£o de par√¢metros inv√°lidos" -ForegroundColor Green
Write-Host ""
Write-Host "üîó Acesse a documenta√ß√£o em: http://localhost:3001/docs" -ForegroundColor Cyan 