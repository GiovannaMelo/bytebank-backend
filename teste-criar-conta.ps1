# Script para testar cria√ß√£o de contas
# Execute: .\teste-criar-conta.ps1

Write-Host "=== TESTE DE CRIA√á√ÉO DE CONTAS ===" -ForegroundColor Green
Write-Host ""

# Configura√ß√µes
$baseUrl = "http://localhost:3001"
$token = ""

# Fun√ß√£o para fazer login e obter token
function Get-AuthToken {
    Write-Host "üîê Fazendo login..." -ForegroundColor Yellow
    
    $loginBody = @{
        email = "teste@gmail.com"
        password = "testes"
    } | ConvertTo-Json

    try {
        $response = Invoke-RestMethod -Uri "$baseUrl/login" -Method POST -Body $loginBody -ContentType "application/json"
        $script:token = $response.token
        Write-Host "‚úÖ Login realizado com sucesso!" -ForegroundColor Green
        Write-Host "Token: $($token.Substring(0, 50))..." -ForegroundColor Gray
        Write-Host ""
    }
    catch {
        Write-Host "‚ùå Erro no login: $($_.Exception.Message)" -ForegroundColor Red
        exit 1
    }
}

# Fun√ß√£o para fazer requisi√ß√µes autenticadas
function Invoke-AuthenticatedRequest {
    param(
        [string]$Uri,
        [string]$Method = "GET",
        [object]$Body = $null
    )
    
    $headers = @{
        "Authorization" = "Bearer $token"
        "Content-Type" = "application/json"
    }
    
    try {
        if ($Body) {
            $response = Invoke-RestMethod -Uri $Uri -Method $Method -Headers $headers -Body ($Body | ConvertTo-Json)
        } else {
            $response = Invoke-RestMethod -Uri $Uri -Method $Method -Headers $headers
        }
        return $response
    }
    catch {
        Write-Host "‚ùå Erro na requisi√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Fun√ß√£o para testar cria√ß√£o de conta corrente
function Test-CreateDebitAccount {
    Write-Host "üè¶ Testando cria√ß√£o de conta corrente..." -ForegroundColor Cyan
    
    $accountBody = @{
        type = "Debit"
        name = "Conta Corrente Principal"
        description = "Conta corrente para uso di√°rio e pagamentos"
        initialBalance = 2500
    }
    
    $response = Invoke-AuthenticatedRequest -Uri "$baseUrl/account" -Method POST -Body $accountBody
    
    if ($response) {
        Write-Host "‚úÖ Conta corrente criada com sucesso!" -ForegroundColor Green
        Write-Host "   ID: $($response.result.id)" -ForegroundColor White
        Write-Host "   Nome: $($response.result.name)" -ForegroundColor White
        Write-Host "   Tipo: $($response.result.type)" -ForegroundColor White
        Write-Host "   Descri√ß√£o: $($response.result.description)" -ForegroundColor White
        Write-Host "   Saldo inicial: R$ $($response.result.initialBalance)" -ForegroundColor White
        Write-Host "   Data de cria√ß√£o: $($response.result.createdAt)" -ForegroundColor White
    }
    Write-Host ""
}

# Fun√ß√£o para testar cria√ß√£o de conta poupan√ßa
function Test-CreateSavingsAccount {
    Write-Host "üí∞ Testando cria√ß√£o de conta poupan√ßa..." -ForegroundColor Cyan
    
    $accountBody = @{
        type = "Savings"
        name = "Conta Poupan√ßa"
        description = "Conta poupan√ßa para reserva de emerg√™ncia"
        initialBalance = 5000
    }
    
    $response = Invoke-AuthenticatedRequest -Uri "$baseUrl/account" -Method POST -Body $accountBody
    
    if ($response) {
        Write-Host "‚úÖ Conta poupan√ßa criada com sucesso!" -ForegroundColor Green
        Write-Host "   ID: $($response.result.id)" -ForegroundColor White
        Write-Host "   Nome: $($response.result.name)" -ForegroundColor White
        Write-Host "   Tipo: $($response.result.type)" -ForegroundColor White
        Write-Host "   Descri√ß√£o: $($response.result.description)" -ForegroundColor White
        Write-Host "   Saldo inicial: R$ $($response.result.initialBalance)" -ForegroundColor White
    }
    Write-Host ""
}

# Fun√ß√£o para testar cria√ß√£o de cart√£o de cr√©dito
function Test-CreateCreditAccount {
    Write-Host "üí≥ Testando cria√ß√£o de cart√£o de cr√©dito..." -ForegroundColor Cyan
    
    $accountBody = @{
        type = "Credit"
        name = "Cart√£o de Cr√©dito Principal"
        description = "Cart√£o de cr√©dito para compras parceladas"
        initialBalance = 0
    }
    
    $response = Invoke-AuthenticatedRequest -Uri "$baseUrl/account" -Method POST -Body $accountBody
    
    if ($response) {
        Write-Host "‚úÖ Cart√£o de cr√©dito criado com sucesso!" -ForegroundColor Green
        Write-Host "   ID: $($response.result.id)" -ForegroundColor White
        Write-Host "   Nome: $($response.result.name)" -ForegroundColor White
        Write-Host "   Tipo: $($response.result.type)" -ForegroundColor White
        Write-Host "   Descri√ß√£o: $($response.result.description)" -ForegroundColor White
        Write-Host "   Saldo inicial: R$ $($response.result.initialBalance)" -ForegroundColor White
    }
    Write-Host ""
}

# Fun√ß√£o para testar cria√ß√£o de conta de investimento
function Test-CreateInvestmentAccount {
    Write-Host "üìà Testando cria√ß√£o de conta de investimento..." -ForegroundColor Cyan
    
    $accountBody = @{
        type = "Investment"
        name = "Conta de Investimentos"
        description = "Conta para aplica√ß√µes em renda fixa e vari√°vel"
        initialBalance = 10000
    }
    
    $response = Invoke-AuthenticatedRequest -Uri "$baseUrl/account" -Method POST -Body $accountBody
    
    if ($response) {
        Write-Host "‚úÖ Conta de investimento criada com sucesso!" -ForegroundColor Green
        Write-Host "   ID: $($response.result.id)" -ForegroundColor White
        Write-Host "   Nome: $($response.result.name)" -ForegroundColor White
        Write-Host "   Tipo: $($response.result.type)" -ForegroundColor White
        Write-Host "   Descri√ß√£o: $($response.result.description)" -ForegroundColor White
        Write-Host "   Saldo inicial: R$ $($response.result.initialBalance)" -ForegroundColor White
    }
    Write-Host ""
}

# Fun√ß√£o para testar cria√ß√£o com dados m√≠nimos
function Test-CreateMinimalAccount {
    Write-Host "üìù Testando cria√ß√£o com dados m√≠nimos..." -ForegroundColor Cyan
    
    $accountBody = @{
        type = "Debit"
    }
    
    $response = Invoke-AuthenticatedRequest -Uri "$baseUrl/account" -Method POST -Body $accountBody
    
    if ($response) {
        Write-Host "‚úÖ Conta criada com dados m√≠nimos!" -ForegroundColor Green
        Write-Host "   ID: $($response.result.id)" -ForegroundColor White
        Write-Host "   Nome padr√£o: $($response.result.name)" -ForegroundColor White
        Write-Host "   Descri√ß√£o padr√£o: $($response.result.description)" -ForegroundColor White
        Write-Host "   Saldo inicial: R$ $($response.result.initialBalance)" -ForegroundColor White
    }
    Write-Host ""
}

# Fun√ß√£o para testar cria√ß√£o com dados inv√°lidos
function Test-CreateInvalidAccount {
    Write-Host "‚ùå Testando cria√ß√£o com dados inv√°lidos..." -ForegroundColor Cyan
    
    $invalidAccountBody = @{
        type = "InvalidType"
        name = "AB" # Muito curto
        description = "A" * 300 # Muito longo
        initialBalance = "valor-invalido"
    }
    
    $response = Invoke-AuthenticatedRequest -Uri "$baseUrl/account" -Method POST -Body $invalidAccountBody
    
    if ($response -eq $null) {
        Write-Host "‚úÖ Comportamento correto: Erro para dados inv√°lidos" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Resposta inesperada para dados inv√°lidos" -ForegroundColor Yellow
    }
    Write-Host ""
}

# Fun√ß√£o para testar cria√ß√£o sem autentica√ß√£o
function Test-CreateUnauthenticated {
    Write-Host "üîí Testando cria√ß√£o sem autentica√ß√£o..." -ForegroundColor Cyan
    
    $accountBody = @{
        type = "Debit"
        name = "Conta sem autentica√ß√£o"
    }
    
    try {
        $response = Invoke-RestMethod -Uri "$baseUrl/account" -Method POST -Body ($accountBody | ConvertTo-Json) -ContentType "application/json"
        Write-Host "‚ö†Ô∏è  Resposta inesperada sem autentica√ß√£o" -ForegroundColor Yellow
    }
    catch {
        Write-Host "‚úÖ Comportamento correto: Acesso negado sem autentica√ß√£o" -ForegroundColor Green
        Write-Host "   Erro: $($_.Exception.Message)" -ForegroundColor Gray
    }
    Write-Host ""
}

# Fun√ß√£o para listar contas criadas
function Test-ListAccounts {
    Write-Host "üìã Listando contas criadas..." -ForegroundColor Cyan
    
    $response = Invoke-AuthenticatedRequest -Uri "$baseUrl/account"
    
    if ($response) {
        Write-Host "‚úÖ Contas encontradas: $($response.result.account.Count)" -ForegroundColor Green
        
        foreach ($account in $response.result.account) {
            Write-Host "   ‚Ä¢ $($account.type): $($account.id)" -ForegroundColor White
        }
    }
    Write-Host ""
}

# Execu√ß√£o dos testes
try {
    # Obter token de autentica√ß√£o
    Get-AuthToken
    
    # Executar todos os testes
    Test-CreateDebitAccount
    Test-CreateSavingsAccount
    Test-CreateCreditAccount
    Test-CreateInvestmentAccount
    Test-CreateMinimalAccount
    Test-CreateInvalidAccount
    Test-CreateUnauthenticated
    Test-ListAccounts
    
    Write-Host "üéâ Todos os testes de cria√ß√£o de contas foram executados com sucesso!" -ForegroundColor Green
    Write-Host ""
    Write-Host "üìã Resumo dos testes:" -ForegroundColor Cyan
    Write-Host "   ‚úÖ Cria√ß√£o de conta corrente" -ForegroundColor White
    Write-Host "   ‚úÖ Cria√ß√£o de conta poupan√ßa" -ForegroundColor White
    Write-Host "   ‚úÖ Cria√ß√£o de cart√£o de cr√©dito" -ForegroundColor White
    Write-Host "   ‚úÖ Cria√ß√£o de conta de investimento" -ForegroundColor White
    Write-Host "   ‚úÖ Cria√ß√£o com dados m√≠nimos" -ForegroundColor White
    Write-Host "   ‚úÖ Valida√ß√£o de dados inv√°lidos" -ForegroundColor White
    Write-Host "   ‚úÖ Teste de autentica√ß√£o" -ForegroundColor White
    Write-Host "   ‚úÖ Listagem de contas" -ForegroundColor White
    Write-Host ""
    Write-Host "üîó Endpoint testado: POST /account" -ForegroundColor Yellow
    Write-Host "üåê Acesse a documenta√ß√£o: http://localhost:3001/docs" -ForegroundColor Yellow
}
catch {
    Write-Host "‚ùå Erro durante a execu√ß√£o dos testes: $($_.Exception.Message)" -ForegroundColor Red
} 